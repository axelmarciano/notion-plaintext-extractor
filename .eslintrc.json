{
  "root": true,
  "globals": {
    "expect": true
  },
  "plugins": [
    "@typescript-eslint",
    "jsdoc",
    "no-null",
    "import",
    "prettier",
    "ban"
  ],
  "extends": [
    "eslint:recommended",
    "plugin:import/errors",
    "plugin:import/warnings",
    "plugin:import/typescript",
    "plugin:prettier/recommended" // Make sure this is the last one in the extends array.
  ],
  "settings": {
    "import/parsers": {
      "@typescript-eslint/parser": [
        ".ts",
        ".tsx",
        ".d.ts"
      ]
    },
    "import/resolver": {
      "typescript": {
        "alwaysTryTypes": true,
        "project": "./tsconfig.json"
      }
    }
  },
  "rules": {
    "prettier/prettier": [
      "error"
    ],
    "ban/ban": [
      2,
      {
        "name": [
          "describe",
          "only"
        ],
        "message": "don't focus tests"
      },
      {
        "name": "fdescribe",
        "message": "don't focus tests"
      },
      {
        "name": [
          "it",
          "only"
        ],
        "message": "don't focus tests"
      },
      {
        "name": "fit",
        "message": "don't focus tests"
      },
      {
        "name": [
          "test",
          "only"
        ],
        "message": "don't focus tests"
      },
      {
        "name": "ftest",
        "message": "don't focus tests"
      },
      {
        "name": "writeObject",
        "message": "Remove before push commit"
      }
    ],
    "@typescript-eslint/ban-ts-comment": [
      "error",
      {
        "ts-expect-error": "allow-with-description",
        "minimumDescriptionLength": 0
      }
    ],
    "@typescript-eslint/adjacent-overload-signatures": "error",
    "@typescript-eslint/array-type": "error",
    "@typescript-eslint/naming-convention": [
      "error",
      {
        "selector": "enum",
        "format": [
          "UPPER_CASE"
        ]
      },
      {
        "selector": "typeLike",
        "format": [
          "PascalCase"
        ],
        "filter": {
          "regex": "^(__String|[A-Za-z]+_[A-Za-z]+)$",
          "match": false
        }
      },
      {
        "selector": "interface",
        "format": [
          "PascalCase"
        ],
        "custom": {
          "regex": "^I[A-Z]",
          "match": false
        },
        "filter": {
          "regex": "^I(Arguments|TextWriter|O([A-Z][a-z]+[A-Za-z]*)?)$",
          "match": false
        }
      },
      {
        "selector": "variable",
        "format": [
          "camelCase",
          "PascalCase",
          "UPPER_CASE"
        ],
        "leadingUnderscore": "allow",
        "filter": {
          "regex": "^(_{1,2}filename|_{1,2}dirname|_+|[A-Za-z]+_[A-Za-z]+)$",
          "match": false
        }
      },
      {
        "selector": "function",
        "format": [
          "camelCase",
          "PascalCase"
        ],
        "leadingUnderscore": "allow",
        "filter": {
          "regex": "^[A-Za-z]+_[A-Za-z]+$",
          "match": false
        }
      },
      {
        "selector": "parameter",
        "format": [
          "camelCase"
        ],
        "leadingUnderscore": "allow",
        "filter": {
          "regex": "^(_+|[A-Za-z]+_[A-Z][a-z]+)$",
          "match": false
        }
      },
      {
        "selector": "method",
        "format": [
          "camelCase",
          "PascalCase"
        ],
        "leadingUnderscore": "allow",
        "filter": {
          "regex": "^[A-Za-z]+_[A-Za-z]+$",
          "match": false
        }
      },
      {
        "selector": "memberLike",
        "format": [
          "camelCase"
        ],
        "leadingUnderscore": "allow",
        "filter": {
          "regex": "^[A-Za-z]+_[A-Za-z]+$",
          "match": false
        }
      },
      {
        "selector": "enumMember",
        "format": [
          "camelCase",
          "PascalCase",
          "UPPER_CASE"
        ],
        "leadingUnderscore": "allow",
        "filter": {
          "regex": "^[A-Za-z]+_[A-Za-z]+$",
          "match": false
        }
      },
      {
        "selector": "property",
        "format": null
      }
    ],
    "@typescript-eslint/consistent-type-definitions": [
      "error",
      "interface"
    ],
    "@typescript-eslint/no-duplicate-imports": "error",
    "@typescript-eslint/no-inferrable-types": "error",
    "@typescript-eslint/no-misused-new": "error",
    "@typescript-eslint/no-this-alias": "error",
    "@typescript-eslint/no-unused-expressions": [
      "error",
      {
        "allowTernary": true
      }
    ],
    "@typescript-eslint/no-unused-vars": [
      "error",
      {
        "argsIgnorePattern": "^_"
      }
    ],
    "@typescript-eslint/prefer-for-of": "error",
    "@typescript-eslint/prefer-function-type": "error",
    "@typescript-eslint/prefer-namespace-keyword": "error",
    "quotes": "off",
    "@typescript-eslint/quotes": [
      "error",
      "single",
      {
        "avoidEscape": true,
        "allowTemplateLiterals": true
      }
    ],
    "semi": "off",
    "@typescript-eslint/semi": "error",
    "space-before-function-paren": "off",
    "@typescript-eslint/space-before-function-paren": [
      "error",
      {
        "asyncArrow": "always",
        "anonymous": "always",
        "named": "never"
      }
    ],
    "no-unused-vars": "off",
    "@typescript-eslint/triple-slash-reference": "error",
    "@typescript-eslint/type-annotation-spacing": "error",
    "@typescript-eslint/unified-signatures": "error",
    "no-console": "error",
    "no-use-before-define": [
      "error",
      "nofunc"
    ],
    "camelcase": "off",
    "brace-style": "off",
    "no-bitwise": "off",
    "no-plusplus": "off",
    "eol-last": "error",
    "linebreak-style": "off",
    "max-len": "off",
    "no-undefined": "error",
    "no-param-reassign": "warn",
    "no-underscore-dangle": "off",
    "consistent-return": "off",
    "require-jsdoc": "off",
    "no-extra-semi": "off",
    "valid-jsdoc": "off",
    "no-constant-condition": 2,
    "no-control-regex": 2,
    "no-debugger": 1,
    "no-dupe-keys": 2,
    "no-duplicate-case": 2,
    "no-empty-character-class": 2,
    "no-empty": 2,
    "no-extra-boolean-cast": 2,
    "no-func-assign": 2,
    "no-inner-declarations": 2,
    "no-invalid-regexp": 2,
    "no-irregular-whitespace": 2,
    "no-negated-in-lhs": 2,
    "no-unreachable": 2,
    "use-isnan": 2,
    "valid-typeof": 2,
    "accessor-pairs": 2,
    "block-scoped-var": 2,
    "default-case": 2,
    "dot-location": [
      2,
      "property"
    ],
    "eqeqeq": [
      2,
      "smart"
    ],
    "no-alert": 1,
    "no-caller": 2,
    "no-case-declarations": 2,
    "no-div-regex": 1,
    "no-else-return": 2,
    "no-eval": 2,
    "no-extend-native": 2,
    "no-extra-bind": 2,
    "no-fallthrough": 2,
    "no-floating-decimal": 2,
    "no-implied-eval": 2,
    "no-iterator": 2,
    "no-labels": 2,
    "no-lone-blocks": 2,
    "no-loop-func": 2,
    "no-multi-spaces": 2,
    "no-multi-str": 2,
    "no-native-reassign": 2,
    "no-new-func": 2,
    "no-new-wrappers": 2,
    "no-new": 2,
    "no-octal-escape": 2,
    "no-octal": 2,
    "no-proto": 2,
    "no-redeclare": 2,
    "no-return-assign": 2,
    "no-self-compare": 2,
    "no-throw-literal": 2,
    "import/no-unresolved": [
      2,
      {
        "commonjs": true,
        "amd": true
      }
    ],
    "import/no-named-as-default": 0,
    "import/namespace": 2,
    "import/default": 2,
    "import/export": 2,
    "import/no-duplicates": 2,
    "import/no-named-as-default-member": 0,
    "no-unused-expressions": [
      2,
      {
        "allowShortCircuit": true
      }
    ],
    "no-useless-call": 2,
    "no-useless-concat": 2,
    "no-void": 2,
    "no-with": 2,
    "radix": [
      2,
      "as-needed"
    ],
    "wrap-iife": [
      2,
      "inside"
    ],
    "yoda": 2,
    "no-catch-shadow": 2,
    "no-delete-var": 2,
    "no-undef-init": 2,
    "global-require": 2,
    "handle-callback-err": 1,
    "no-new-require": 2,
    "block-spacing": [
      2,
      "always"
    ],
    "comma-spacing": [
      2,
      {
        "before": false,
        "after": true
      }
    ],
    "comma-style": [
      2,
      "last"
    ],
    "consistent-this": [
      2,
      "self"
    ],
    "key-spacing": [
      2,
      {
        "beforeColon": false,
        "afterColon": true
      }
    ],
    "new-parens": 2,
    "no-array-constructor": 2,
    "no-continue": 2,
    "no-lonely-if": 2,
    "no-mixed-spaces-and-tabs": 2,
    "no-nested-ternary": 2,
    "no-new-object": 2,
    "no-spaced-func": 2,
    "keyword-spacing": 2,
    "no-trailing-spaces": [
      2,
      {
        "skipBlankLines": true
      }
    ],
    "no-unneeded-ternary": 2,
    "space-before-blocks": [
      2,
      "always"
    ],
    "space-infix-ops": 2,
    "space-unary-ops": [
      2,
      {
        "words": true,
        "nonwords": false
      }
    ],
    "spaced-comment": [
      2,
      "always"
    ],
    "arrow-parens": [
      2,
      "always"
    ],
    "arrow-spacing": 2,
    "constructor-super": 2,
    "generator-star-spacing": [
      2,
      {
        "before": true,
        "after": false
      }
    ],
    "no-confusing-arrow": [
      "error",
      {
        "allowParens": true
      }
    ],
    "no-class-assign": 2,
    "no-const-assign": 2,
    "no-dupe-class-members": "off",
    // note you must disable the base rule as it can report incorrect errors
    "@typescript-eslint/no-dupe-class-members": [
      "error"
    ],
    "no-this-before-super": 2,
    "prefer-spread": 1,
    "require-yield": 2
  },
  "env": {
    "mocha": true,
    "node": true,
    "es6": true
  },
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "ecmaVersion": 8,
    "ecmaFeatures": {
      "experimentalObjectRestSpread": true
    }
  }
}